pipeline {
  agent {
    docker {
      image 'any'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
    }
  }
  environment {
    SONARQUBE_TOKEN = credentials('sonarqube')
    SONAR_URL = "https://sonarcloud.io" // Update this to your SonarQube server URL
    GIT_REPO_NAME = "jenkins-CICD"
    GIT_USER_NAME = "christromeo"
    DOCKER_IMAGE = "christromeo/ultimate-cicd:${BUILD_NUMBER}"
    REGISTRY_CREDENTIALS = credentials('docker-cred') // Make sure this matches your Jenkins credentials ID
    GITHUB_TOKEN = credentials('github') // Make sure this matches your Jenkins credentials ID
  }
  stages {
    stage('Check Docker Availability') {
      steps {
        sh 'docker --version'
      }
    }
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // Replace with your GitHub repository URL
        git branch: 'main', url: 'https://github.com/christromeo/jenkins-CICD.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // Build the project and create a JAR file
        sh 'cd spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      steps {
        withSonarQubeEnv('SonarQube') {
          sh 'mvn sonar:sonar -Dsonar.login=$SONARQUBE_TOKEN -Dsonar.host.url=$SONAR_URL'
        }
      }
    }
    stage('Build and Push Docker Image') {
      steps {
        script {
          sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "${REGISTRY_CREDENTIALS}") {
            dockerImage.push()
          }
        }
      }
    }
    stage('Update Deployment File') {
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
              git config user.email "christmouyabi@hotmail.com" // Update with your email
              git config user.name "chris" // Update with your name
              BUILD_NUMBER=${BUILD_NUMBER}
              sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
              git add spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
          '''
        }
      }
    }
  }
}
